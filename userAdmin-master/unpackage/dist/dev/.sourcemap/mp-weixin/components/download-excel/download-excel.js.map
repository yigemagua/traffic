{"version":3,"sources":["webpack:///E:/微信小程序/小程序源码/userAdmin-master/components/download-excel/download-excel.vue?d62d","webpack:///E:/微信小程序/小程序源码/userAdmin-master/components/download-excel/download-excel.vue?d27c","webpack:///E:/微信小程序/小程序源码/userAdmin-master/components/download-excel/download-excel.vue?5adb","webpack:///E:/微信小程序/小程序源码/userAdmin-master/components/download-excel/download-excel.vue?3c76","uni-app:///components/download-excel/download-excel.vue"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2H;AAC3H;AACkE;AACL;;;AAG7D;AACmM;AACnM,gBAAgB,sMAAU;AAC1B,EAAE,oFAAM;AACR,EAAE,yFAAM;AACR,EAAE,kGAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,6FAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACtBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAA2wB,CAAgB,qvBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;ACO/xB,mF;;AAEA;AACA,uBADA;AAEA;AACA;AACA;AACA,kBADA;AAEA,oBAFA,EAFA;;AAMA;AACA;AACA,iBADA;AAEA,qBAFA;AAGA,mBAHA,EAPA;;AAYA;AACA;AACA;AACA,kBADA;AAEA,iDAFA,EAdA;;AAkBA;AACA;AACA;AACA,kBADA;AAEA,iDAFA,EApBA;;AAwBA;AACA;AACA,kBADA;AAEA,qBAFA;AAGA,iBAHA,EAzBA;;AA8BA;AACA;AACA,mBADA,EA/BA;;AAkCA;AACA;AACA,mBADA,EAnCA;;AAsCA;AACA;AACA,kBADA;AAEA,yBAFA,EAvCA;;AA2CA;AACA,oBADA,EA3CA;;AA8CA;AACA,iBADA;AAEA,+CAFA,EA9CA;;AAkDA;AACA,kBADA;AAEA,uBAFA,EAlDA;;AAsDA;AACA;AACA,oBADA,EAvDA;;AA0DA;AACA;AACA,oBADA,EA3DA;;AA8DA;AACA;AACA,mBADA;AAEA,mBAFA,EA/DA;;AAmEA;AACA;AACA,mBADA;AAEA,oBAFA,EApEA,EAFA;;;AA2EA;AACA;AACA,UAFA,oBAEA;AACA;AACA;AACA,KALA;;AAOA,kBAPA,4BAOA;AACA;;AAEA;AACA,KAXA,EA3EA;;AAwFA;AACA,YADA,sBACA;AACA,0DADA;AAEA,wCAFA;;AAIA,oBAJA,GAIA,UAJA;AAKA,0DALA,sDAKA,aALA,QAKA,IALA;;AAOA,qCAPA;;;;AAWA,oBAXA,GAWA,kDAXA;AAYA,qCAZA;;AAcA;AACA,qCADA;AAEA,mDAFA;AAGA,2BAHA,CAdA;;AAmBA,oCAnBA;AAoBA;AACA,qCADA;AAEA,kDAFA;AAGA,iCAHA,CApBA;;;AA0BA;AACA,qCADA;AAEA,0BAFA;AAGA,0CAHA,CA1BA;;AA+BA,KAhCA;AAiCA;;;AAGA;AACA,oBADA,GACA,6BADA;AAEA,uDAFA,wDAEA,mBAFA;AAGA,6DAHA,6JApCA;;AAyCA;;;;;;;AAOA,aAhDA,qBAgDA,IAhDA,EAgDA;AACA;AACA,mpBADA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cADA;AAEA,6DAFA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDADA,CADA;;AAIA,iBALA;AAMA;AACA;AACA,OAXA;AAYA;;AAEA;AACA;AACA;AACA;AACA,mBADA;AAEA,6DAFA;;AAIA;AACA;;AAEA;AACA,aADA,CACA,UADA,EACA,OADA;AAEA,aAFA,CAEA,cAFA,EAEA,cAFA;AAGA,KArGA;AAsGA;;;;;AAKA,aA3GA,qBA2GA,IA3GA,EA2GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDADA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAhBA;AAiBA;AACA;AACA;AACA;AACA;AACA,KAnJA;AAoJA;;;;;AAKA,oBAzJA,4BAyJA,IAzJA,EAyJA,MAzJA,EAyJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAPA;;AASA;AACA,KAvKA;AAwKA,WAxKA,mBAwKA,IAxKA,EAwKA,MAxKA,EAwKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAlLA;AAmLA;;;;;AAKA,kBAxLA,0BAwLA,SAxLA,EAwLA,MAxLA,EAwLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OALA,MAKA;AACA;AACA;AACA;AACA,KAnMA;;AAqMA,YArMA,oBAqMA,GArMA,EAqMA,IArMA,EAqMA;AACA;AACA;AACA;;AAEA;AACA;AACA,yDADA;AAEA;;AAEA;AACA;;AAEA;AACA,KAnNA;;AAqNA;;;AAGA,iCAxNA,yCAwNA,KAxNA,EAwNA;AACA;AACA;AACA,KA3NA;AA4NA,qBA5NA,6BA4NA,KA5NA,EA4NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxOA;AAyOA,0BAzOA,kCAyOA,IAzOA,EAyOA,OAzOA,EAyOA;AACA,4BADA;AAEA,aAFA,aAEA;AACA;AACA,SAJA;AAKA;AACA,KA/OA;;AAiPA,wBAjPA,gCAiPA,IAjPA,EAiPA,QAjPA,EAiPA;AACA;AACA;AACA;AACA,KArPA;AAsPA,cAtPA,sBAsPA,KAtPA,EAsPA;AACA;AACA,WADA;AAEA,uBAFA;AAGA,KA1PA;AA2PA,gBA3PA,wBA2PA,IA3PA,EA2PA,IA3PA,EA2PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApQA;AAqQA;AA7VA,C","file":"components/download-excel/download-excel.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./download-excel.vue?vue&type=template&id=78ca2d04&\"\nvar renderjs\nimport script from \"./download-excel.vue?vue&type=script&lang=js&\"\nexport * from \"./download-excel.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"components/download-excel/download-excel.vue\"\nexport default component.exports","export * from \"-!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--16-0!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./download-excel.vue?vue&type=template&id=78ca2d04&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-1!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./download-excel.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-1!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../编译器/HBuilderX.3.6.5.20221121/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./download-excel.vue?vue&type=script&lang=js&\"","<template>\n  <div :id=\"idName\" @click=\"generate\">\n    <slot> Download {{ name }} </slot>\n  </div>\n</template>\n\n<script>\nimport download from \"./download\";\n\nexport default {\n  name: \"downloadExcel\",\n  props: {\n    // mime type [xls, csv]\n    type: {\n      type: String,\n      default: \"xls\",\n    },\n    // Json to download\n    data: {\n      type: Array,\n      required: false,\n      default: null,\n    },\n    // fields inside the Json Object that you want to export\n    // if no given, all the properties in the Json are exported\n    fields: {\n      type: Object,\n      default: () => null,\n    },\n    // this prop is used to fix the problem with other components that use the\n    // variable fields, like vee-validate. exportFields works exactly like fields\n    exportFields: {\n      type: Object,\n      default: () => null,\n    },\n    // Use as fallback when the row has no field values\n    defaultValue: {\n      type: String,\n      required: false,\n      default: \"\",\n    },\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\n    header: {\n      default: null,\n    },\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n    footer: {\n      default: null,\n    },\n    // filename to export\n    name: {\n      type: String,\n      default: \"data.xls\",\n    },\n    fetch: {\n      type: Function,\n    },\n    meta: {\n      type: Array,\n      default: () => [],\n    },\n    worksheet: {\n      type: String,\n      default: \"Sheet1\",\n    },\n    //event before generate was called\n    beforeGenerate: {\n      type: Function,\n    },\n    //event before download pops up\n    beforeFinish: {\n      type: Function,\n    },\n    // Determine if CSV Data should be escaped\n    escapeCsv: {\n      type: Boolean,\n      default: true,\n    },\n    // long number stringify\n    stringifyLongNum: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    // unique identifier\n    idName() {\n      var now = new Date().getTime();\n      return \"export_\" + now;\n    },\n\n    downloadFields() {\n      if (this.fields) return this.fields;\n\n      if (this.exportFields) return this.exportFields;\n    },\n  },\n  methods: {\n    async generate() {\n      if (typeof this.beforeGenerate === \"function\") {\n        await this.beforeGenerate();\n      }\n      let data = this.data;\n      if (typeof this.fetch === \"function\" || !data) data = await this.fetch();\n\n      if (!data || !data.length) {\n        return;\n      }\n\n      let json = this.getProcessedJson(data, this.downloadFields);\n      if (this.type === \"html\") {\n        // this is mainly for testing\n        return this.export(\n          this.jsonToXLS(json),\n          this.name.replace(\".xls\", \".html\"),\n          \"text/html\"\n        );\n      } else if (this.type === \"csv\") {\n        return this.export(\n          this.jsonToCSV(json),\n          this.name.replace(\".xls\", \".csv\"),\n          \"application/csv\"\n        );\n      }\n      return this.export(\n        this.jsonToXLS(json),\n        this.name,\n        \"application/vnd.ms-excel\"\n      );\n    },\n    /*\n\t\tUse downloadjs to generate the download link\n\t\t*/\n    export: async function (data, filename, mime) {\n      let blob = this.base64ToBlob(data, mime);\n      if (typeof this.beforeFinish === \"function\") await this.beforeFinish();\n      download(blob, filename, mime);\n    },\n    /*\n\t\tjsonToXLS\n\t\t---------------\n\t\tTransform json data into an xml document with MS Excel format, sadly\n\t\tit shows a prompt when it opens, that is a default behavior for\n\t\tMicrosoft office and cannot be avoided. It's recommended to use CSV format instead.\n\t\t*/\n    jsonToXLS(data) {\n      let xlsTemp =\n        '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n      let xlsData = \"<thead>\";\n      const colspan = Object.keys(data[0]).length;\n      let _self = this;\n\n      //Header\n      const header = this.header || this.$attrs.title;\n      if (header) {\n        xlsData += this.parseExtraData(\n          header,\n          '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\n        );\n      }\n\n      //Fields\n      xlsData += \"<tr>\";\n      for (let key in data[0]) {\n        xlsData += \"<th>\" + key + \"</th>\";\n      }\n      xlsData += \"</tr>\";\n      xlsData += \"</thead>\";\n\n      //Data\n      xlsData += \"<tbody>\";\n      data.map(function (item, index) {\n        xlsData += \"<tr>\";\n        for (let key in item) {\n          xlsData +=\n            \"<td>\" +\n            _self.preprocessLongNum(\n              _self.valueReformattedForMultilines(item[key])\n            ) +\n            \"</td>\";\n        }\n        xlsData += \"</tr>\";\n      });\n      xlsData += \"</tbody>\";\n\n      //Footer\n      if (this.footer != null) {\n        xlsData += \"<tfoot>\";\n        xlsData += this.parseExtraData(\n          this.footer,\n          '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\n        );\n        xlsData += \"</tfoot>\";\n      }\n\n      return xlsTemp\n        .replace(\"${table}\", xlsData)\n        .replace(\"${worksheet}\", this.worksheet);\n    },\n    /*\n\t\tjsonToCSV\n\t\t---------------\n\t\tTransform json data into an CSV file.\n\t\t*/\n    jsonToCSV(data) {\n      let _self = this;\n      var csvData = [];\n\n      //Header\n      const header = this.header || this.$attrs.title;\n      if (header) {\n        csvData.push(this.parseExtraData(header, \"${data}\\r\\n\"));\n      }\n\n      //Fields\n      for (let key in data[0]) {\n        csvData.push(key);\n        csvData.push(\",\");\n      }\n      csvData.pop();\n      csvData.push(\"\\r\\n\");\n      //Data\n      data.map(function (item) {\n        for (let key in item) {\n          let escapedCSV = item[key] + \"\";\n          // Escaped CSV data to string to avoid problems with numbers or other types of values\n          // this is controlled by the prop escapeCsv\n          if (_self.escapeCsv) {\n            escapedCSV = '=\"' + escapedCSV + '\"'; // cast Numbers to string\n            if (escapedCSV.match(/[,\"\\n]/)) {\n              escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n            }\n          }\n          csvData.push(escapedCSV);\n          csvData.push(\",\");\n        }\n        csvData.pop();\n        csvData.push(\"\\r\\n\");\n      });\n      //Footer\n      if (this.footer != null) {\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n      }\n      return csvData.join(\"\");\n    },\n    /*\n\t\tgetProcessedJson\n\t\t---------------\n\t\tGet only the data to export, if no fields are set return all the data\n\t\t*/\n    getProcessedJson(data, header) {\n      let keys = this.getKeys(data, header);\n      let newData = [];\n      let _self = this;\n      data.map(function (item, index) {\n        let newItem = {};\n        for (let label in keys) {\n          let property = keys[label];\n          newItem[label] = _self.getValue(property, item);\n        }\n        newData.push(newItem);\n      });\n\n      return newData;\n    },\n    getKeys(data, header) {\n      if (header) {\n        return header;\n      }\n\n      let keys = {};\n      for (let key in data[0]) {\n        keys[key] = key;\n      }\n      return keys;\n    },\n    /*\n\t\tparseExtraData\n\t\t---------------\n\t\tParse title and footer attribute to the csv format\n\t\t*/\n    parseExtraData(extraData, format) {\n      let parseData = \"\";\n      if (Array.isArray(extraData)) {\n        for (var i = 0; i < extraData.length; i++) {\n          if (extraData[i])\n            parseData += format.replace(\"${data}\", extraData[i]);\n        }\n      } else {\n        parseData += format.replace(\"${data}\", extraData);\n      }\n      return parseData;\n    },\n\n    getValue(key, item) {\n      const field = typeof key !== \"object\" ? key : key.field;\n      let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n      let value = this.defaultValue;\n\n      if (!field) value = item;\n      else if (indexes.length > 1)\n        value = this.getValueFromNestedItem(item, indexes);\n      else value = this.parseValue(item[field]);\n\n      if (key.hasOwnProperty(\"callback\"))\n        value = this.getValueFromCallback(value, key.callback);\n\n      return value;\n    },\n\n    /*\n    convert values with newline \\n characters into <br/>\n    */\n    valueReformattedForMultilines(value) {\n      if (typeof value == \"string\") return value.replace(/\\n/gi, \"<br/>\");\n      else return value;\n    },\n    preprocessLongNum(value) {\n      if (this.stringifyLongNum) {\n        if (String(value).startsWith(\"0x\")) {\n          return value;\n        }\n        if (!isNaN(value) && value != \"\") {\n          if (value > 99999999999 || value < 0.0000000000001) {\n            return '=\"' + value + '\"';\n          }\n        }\n      }\n      return value;\n    },\n    getValueFromNestedItem(item, indexes) {\n      let nestedItem = item;\n      for (let index of indexes) {\n        if (nestedItem) nestedItem = nestedItem[index];\n      }\n      return this.parseValue(nestedItem);\n    },\n\n    getValueFromCallback(item, callback) {\n      if (typeof callback !== \"function\") return this.defaultValue;\n      const value = callback(item);\n      return this.parseValue(value);\n    },\n    parseValue(value) {\n      return value || value === 0 || typeof value === \"boolean\"\n        ? value\n        : this.defaultValue;\n    },\n    base64ToBlob(data, mime) {\n      let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n      let bstr = atob(base64);\n      let n = bstr.length;\n      let u8arr = new Uint8ClampedArray(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      return new Blob([u8arr], { type: mime });\n    },\n  }, // end methods\n};\n</script>\n"],"sourceRoot":""}